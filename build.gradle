import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'com.gradleup.shadow' version '9.1.0'
    id 'java'
    id 'java-library'
}

allprojects {
    apply plugin: "java"
    apply plugin: 'java-library'
    apply plugin: "com.gradleup.shadow"

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    group 'org.vivecraft'
    version = plugin_version

    configurations.configureEach {
        exclude group: "net.md-5", module: "bungeecord-chat"
    }

    repositories {
        mavenLocal {
            content {
                // this repository *only* contains artifacts with group
                includeGroup "org.spigotmc"
                includeGroup "org.bukkit"
                includeGroup "com.mojang"
            }
        }
        maven {
            url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
            content {
                includeGroup 'org.bukkit'
                includeGroup 'org.spigotmc'
            }
        }

        // elkmakers maven, for the mapping files
        maven {
            url = "https://maven.elmakers.com/repository/"
            content {
                includeGroup 'org.spigotmc'
            }
        }

        maven {
            name = 'minecraft'
            url = 'https://libraries.minecraft.net'
            content {
                includeModule("com.mojang", "brigadier")
            }
        }

        // add the ScreamingSandals repository for the mapping bundle
        maven {
            url = "https://repo.screamingsandals.org/public"
            content {
                includeGroup("me.kcra.takenaka")
            }
        }

        maven {
            url = 'https://jitpack.io'
        }

        maven {
            url = "https://maven.apache.org"
        }

        mavenCentral()
    }

    dependencies {
        compileOnly('org.jetbrains:annotations:26.0.2')
        implementation('org.joml:joml:1.10.8') { transitive = false }

        // mc libs
        compileOnly("io.netty:netty-handler:4.1.127.Final")
        compileOnly("com.google.code.gson:gson:2.2.4")

        // the small library needed for the accessors to function
        implementation("me.kcra.takenaka:generator-accessor-runtime:$takenaka_version")
    }
}

dependencies {
    subprojects.each { subproj ->
        if (subproj.name != "generate" && subproj.name != "stubs") {
            if (subproj.getTasksByName("remap", false).isEmpty()) {
                implementation subproj
            } else {
                implementation project(path: subproj.path, configuration: "remapped")
            }
        }
    }
}

// make sure remap is ran first
gradle.projectsEvaluated {
    tasks.matching { it.name == 'shadowJar' }.configureEach { ShadowJar shadow ->
        subprojects.each { p ->
            if (p.tasks.findByName('remap')) shadow.dependsOn(p.tasks.named('remap'))
        }
    }
}

shadowJar {
    archiveClassifier.set('')
    //relocate 'org.joml', 'shadow.io.org.joml'
    /*minimize() {
        subprojects.each { subproj ->
            exclude dependency(subproj)
        }
    }*/
}

// Disable jar and replace with shadowJar
jar.enabled = false
assemble.dependsOn(shadowJar)

tasks.register('printProjectName') {
    doLast {
        println rootProject.name
    }
}

tasks.register('release') {
    dependsOn build

    doLast {
        if (!version.endsWith("-SNAPSHOT")) {
            // Rename final JAR to trim off version information
            shadowJar.archiveFile.get().getAsFile()
                .renameTo(layout.buildDirectory.get().toString() + File.separator + 'libs' + File.separator
                    + rootProject.name + '.jar')
        }
    }
}
